import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os
import random
import string

# Ensure cryptography is installed
try:
    from cryptography.fernet import Fernet, InvalidToken
except ImportError:
    import subprocess
    subprocess.check_call(["python", "-m", "pip", "install", "cryptography"])
    from cryptography.fernet import Fernet, InvalidToken

try:
    import pyperclip
except ImportError:
    import subprocess
    subprocess.check_call(["python", "-m", "pip", "install", "pyperclip"])
    import pyperclip

PASSWORDS_FILE = "passwords.json"
KEY_FILE = "secret.key"

def generate_key():
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as key_file:
        key_file.write(key)
    return key

def load_key():
    if not os.path.exists(KEY_FILE):
        return generate_key()
    with open(KEY_FILE, "rb") as key_file:
        return key_file.read()

fernet = Fernet(load_key())

def encrypt(text):
    return fernet.encrypt(text.encode()).decode()

def decrypt(token):
    try:
        return fernet.decrypt(token.encode()).decode()
    except InvalidToken:
        return "<Decryption Failed>"

def load_passwords():
    if not os.path.exists(PASSWORDS_FILE):
        return {}
    with open(PASSWORDS_FILE, "r") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_passwords(passwords):
    with open(PASSWORDS_FILE, "w") as f:
        json.dump(passwords, f, indent=2)

def generate_password(length=16):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

class PasswordManagerGUI:
    def __init__(self, master):
        self.master = master
        master.title("PasswordsToGo")
        master.geometry("400x300")
        master.resizable(False, False)
        self.passwords = load_passwords()

        self.title_label = tk.Label(master, text="ðŸ”’ PasswordsToGo", font=("Helvetica", 18, "bold"))
        self.title_label.pack(pady=12)

        self.add_button = tk.Button(master, text="Add New Password", width=25, command=self.add_password)
        self.add_button.pack(pady=8)

        self.view_button = tk.Button(master, text="View Passwords", width=25, command=self.view_passwords)
        self.view_button.pack(pady=8)

        self.search_button = tk.Button(master, text="Search Password", width=25, command=self.search_password)
        self.search_button.pack(pady=8)

        self.quit_button = tk.Button(master, text="Exit", width=25, command=master.quit)
        self.quit_button.pack(pady=8)

    def add_password(self):
        site = simpledialog.askstring("Add Password", "For which site/app?")
        if not site:
            return
        user = simpledialog.askstring("Add Password", "Username/Email?")
        if not user:
            return
        generated = generate_password()
        pw = simpledialog.askstring("Add Password", f"Password (leave blank to use generated):\n{generated}", show="*")
        if not pw:
            pw = generated

        encrypted_pw = encrypt(pw)

        if site not in self.passwords:
            self.passwords[site] = []
        self.passwords[site].append({"user": user, "password": encrypted_pw})
        save_passwords(self.passwords)
        messagebox.showinfo("Success", "Password saved!")

    def view_passwords(self):
        top = tk.Toplevel(self.master)
        top.title("Stored Passwords")
        top.geometry("400x300")
        frame = tk.Frame(top)
        frame.pack(fill="both", expand=True)
        scrollbar = tk.Scrollbar(frame)
        scrollbar.pack(side="right", fill="y")
        listbox = tk.Listbox(frame, width=50, yscrollcommand=scrollbar.set)
        for site, entries in self.passwords.items():
            for entry in entries:
                listbox.insert("end", f"{site} | {entry['user']}")
        listbox.pack(side="left", fill="both", expand=True)
        scrollbar.config(command=listbox.yview)

        def show_selected():
            idx = listbox.curselection()
            if not idx:
                return
            selected = listbox.get(idx)
            site, user = selected.split(" | ")
            entry = next(e for e in self.passwords[site] if e['user'] == user)
            pw = decrypt(entry["password"])
            pwtop = tk.Toplevel(top)
            pwtop.title("Password Details")
            tk.Label(pwtop, text=f"Site: {site}\nUser: {user}\nPassword:", font=("Helvetica", 12)).pack(pady=5)
            pwentry = tk.Entry(pwtop, show="*", width=30)
            pwentry.insert(0, pw)
            pwentry.pack(pady=5)
            def toggle():
                if pwentry.cget("show") == "*":
                    pwentry.config(show="")
                    toggle_btn.config(text="Hide")
                else:
                    pwentry.config(show="*")
                    toggle_btn.config(text="Show")
            toggle_btn = tk.Button(pwtop, text="Show", width=10, command=toggle)
            toggle_btn.pack(pady=2)
            copy_btn = tk.Button(pwtop, text="Copy to Clipboard", width=16, command=lambda: pyperclip.copy(pwentry.get()))
            copy_btn.pack(pady=2)

        btn = tk.Button(top, text="Show Details", command=show_selected)
        btn.pack(pady=8)

    def search_password(self):
        query = simpledialog.askstring("Search", "Enter site or username to search for:")
        if not query:
            return
        results = []
        for site, entries in self.passwords.items():
            if query.lower() in site.lower():
                for entry in entries:
                    results.append((site, entry["user"]))
            else:
                for entry in entries:
                    if query.lower() in entry["user"].lower():
                        results.append((site, entry["user"]))
        if not results:
            messagebox.showinfo("No Results", "No matching passwords found.")
            return
        top = tk.Toplevel(self.master)
        top.title("Search Results")
        top.geometry("400x200")
        listbox = tk.Listbox(top, width=50)
        for site, user in results:
            listbox.insert("end", f"{site} | {user}")
        listbox.pack(fill="both", expand=True)
        def show_selected():
            idx = listbox.curselection()
            if not idx:
                return
            selected = listbox.get(idx)
            site, user = selected.split(" | ")
            entry = next(e for e in self.passwords[site] if e['user'] == user)
            pw = decrypt(entry["password"])
            pwtop = tk.Toplevel(top)
            pwtop.title("Password Details")
            tk.Label(pwtop, text=f"Site: {site}\nUser: {user}\nPassword:", font=("Helvetica", 12)).pack(pady=5)
            pwentry = tk.Entry(pwtop, show="*", width=30)
            pwentry.insert(0, pw)
            pwentry.pack(pady=5)
            def toggle():
                if pwentry.cget("show") == "*":
                    pwentry.config(show="")
                    toggle_btn.config(text="Hide")
                else:
                    pwentry.config(show="*")
                    toggle_btn.config(text="Show")
            toggle_btn = tk.Button(pwtop, text="Show", width=10, command=toggle)
            toggle_btn.pack(pady=2)
            copy_btn = tk.Button(pwtop, text="Copy to Clipboard", width=16, command=lambda: pyperclip.copy(pwentry.get()))
            copy_btn.pack(pady=2)
        btn = tk.Button(top, text="Show Details", command=show_selected)
        btn.pack(pady=8)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordManagerGUI(root)
    root.mainloop()
